# # This config is equivalent to both the '.circleci/extended/orb-free.yml' and the base '.circleci/config.yml'
# version: 2.1

# # Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# # See: https://circleci.com/docs/2.0/orb-intro/
# orbs:
#   node: circleci/node@4.7

# # Invoke jobs via workflows
# # See: https://circleci.com/docs/2.0/configuration-reference/#workflows
# workflows:
#   sample: # This is the name of the workflow, feel free to change it to better match your workflow.
#     # Inside the workflow, you define the jobs you want to run.
#     jobs:
#       - node/test:
#           # This is the node version to use for the `cimg/node` tag
#           # Relevant tags can be found on the CircleCI Developer Hub
#           # https://circleci.com/developer/images/image/cimg/node
#           version: '16.10'
#           # If you are using yarn, change the line below from "npm" to "yarn"
#           pkg-manager: yarn

version: 2.1

jobs:
  build:
    docker:
      - image: cimg/node:17.0.1
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Show current branch
          command: echo ${CIRCLE_BRANCH}
      - restore_cache:
          keys: 
            - app-{{ checksum "package.json" }}
            - app-
      - run:
          name: Installing yarn
          command: sudo npm install -g yarn
      - run:
          name: Installing dependencies
          command: yarn install
      - save_cache:
          paths:
            - node_modules
          key: app-{{ checksum "package.json" }}
  deploy-to-aws-s3:
    docker:
      - image: cimg/node:17.0.1
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Show current branch
          command: echo ${CIRCLE_BRANCH}
      - run: 
          name: Installing AWS CLI
          working_directory: /
          command: |
            sudo apt-get -y -qq update
            sudo apt-get install -y awscli
            sudo apt-get install -y python-pip python-dev build-essential
      - run:
          name: Build project
          command: |
            sudo npm install -g yarn
            yarn install
            yarn build
            cd build
            zip ../build.zip -r * .[^.]*
            echo "Build successful"
      - run:
          name: Deploy to AWS S3
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ] 
            then 
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_PRODUCTION} --delete
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then 
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_STAGING} --delete
            else
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_DEV} --delete
            fi
  deploy-to-aws-cloudfront:
    docker:
      - image: cimg/node:17.0.1
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Show current branch
          command: echo ${CIRCLE_BRANCH}
      - run: 
          name: Installing AWS CLI
          working_directory: /
          command: |
            sudo apt-get -y -qq update
            sudo apt-get install -y awscli
            sudo apt-get install -y python-pip python-dev build-essential
      - run:
          name: Build project
          command: |
            sudo npm install -g yarn
            yarn install
            yarn build
            cd build
            zip ../build.zip -r * .[^.]*
            echo "Build successful"
      - run:
          name: Deploy to AWS Cloudfront
          command: |
            aws configure set preview.cloudfront true
            if [ "${CIRCLE_BRANCH}" == "master" ] 
            then 
              aws cloudfront create-invalidation --distribution-id ${PRODUCTION_DISTRIBUTION_ID} --paths /\*              
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then 
              aws cloudfront create-invalidation --distribution-id ${STAGING_DISTRIBUTION_ID} --paths /\*              
            else
              aws cloudfront create-invalidation --distribution-id ${DEV_DISTRIBUTION_ID} --paths /\*              
            fi
workflows:
  build_and_deploy:
    jobs:
      - build
      - deploy-to-aws-s3:
          requires:
            - build
          filters:
            branches:
              only:
                - dev
                - staging
                - master
      - deploy-to-aws-cloudfront:
          requires:
            - deploy-to-aws-s3
          filters:
            branches:
              only:
                - dev
                - staging
                - master
